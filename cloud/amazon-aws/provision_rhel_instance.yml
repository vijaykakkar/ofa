---
- name: provision RHEL on Amazon Web Services EC2
  connection: local
  hosts: localhost
  gather_facts: false
  # The paramater region will be set for all ec2 modules by specifying it here under module_defaults
  vars:
    instance_name: "TEST_INSTANCE"
    owner_tag: "unknown"
    ec2_region: "{{ your_region | default('ca-central-1') }}"
  tasks:

    ## provision resources to provision RHEL onto (e.g. VPC)
    - include_tasks: 'provision_aws_resources.yml'


    # Using ec2_ami_facts allows us to find a particular ami instance id regardless of region
    # Look for owner 309956199498 to find official Red Hat AMIs
    - name: find ami instance-id for RHEL
      ec2_ami_info:
        region: "{{ ec2_region }}"
        owners: 309956199498
        filters:
          name: "RHEL-8*HVM-*Hourly*"
          architecture: x86_64
      register: amis

    # The module ec2_ami_facts can return multiple ami instances for a given search
    # we will grab the latest instance (by date) that meets our criteria
    - name: SET AMI FOR SERVER01
      set_fact:
        server01_ami: >
          {{ amis.images | selectattr('name', 'defined') | sort(attribute='creation_date') | last }}

   # the ec2 module actually provisions the instance
   # group refers to the AWS Security Group
   # key_name refers to the SSH key pair to use for this instance
   # vpc_subnet_id refers to the Virtual Private Cloud (VPC) subnet idenitifer to tie the instance to
    - name: Create EC2 instances for node
      ec2_instance:
        region: "{{ ec2_region }}"
        group: "aws-demo-sg"
        key_name: "aws-demo-key"
        vpc_subnet_id: "{{ ec2_vpc_subnet }}"
        assign_public_ip: yes
        instance_type: t2.medium
        image: "{{ server01_ami.image_id }}"
        wait: yes
        exact_count: 1
        instance_tags:
            Name: "{{ instance_name }}"
            owner: "{{ owner_tag }}"
        count_tag:
            Name: "{{ instance_name }}"
