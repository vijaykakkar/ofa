#- name: Deploy AWS Resources to Support an Instances
#  hosts: localhost
#  gather_facts: false
#  tasks:
# It is possible to use a pre-existing key-pair, this is done just for simplicity
#- name: Create ssh key pair
#  ec2_key:
#    region: "{{ ec2_region }}"
#    name: "aws-demo-key"
#  register: create_key

#- name: update SSH key with latest
#  become: true
#  ansible.controller.credential:
#    name: AWS_DEMO_INSTANCES_KEY
#    organization: Default
#    credential_type: Machine
#    controller_username: admin
#    controller_password: sean>colin
#    controller_host: https://student1.cfd12.demoredhat.com/
#    validate_certs: false
#    inputs:
#      ssh_key_data: "{{ create_key.key.private_key }}"
#  when: create_key.changed

# VPC or Virtual Private Cloud.  The instance will be tied to a subnet that belongs to this particular VPC
- name: Create AWS VPC aws-demo-vpc
  amazon.aws.ec2_vpc_net:
    name: "aws-demo-vpc"
    cidr_block: "192.168.0.0/24"
    region: "{{ ec2_region }}"
    tags:
      Demo: aws demo
  register: create_vpc

# If a secruity group is not created, instances will be tied to the Default secruity grouop that allows all traffic (non-secure)
- name: Create EC2 security group aws-demo-sg
  amazon.aws.ec2_group:
    name: "aws-demo-sg"
    region: "{{ ec2_region }}"
    description: AWS demo SG for the demo
    vpc_id: "{{create_vpc.vpc.id}}"
    tags:
      Name: "aws-demo-sg"
      Demo: AWS demo
    rules:
      - proto: tcp
        ports:
        - 22
        cidr_ip: 0.0.0.0/0

# This task is subdiving up the 192.168.0.0/24 and getting a smaller chunk, a /28
- name: Create subnet for aws-demo-vpc
  amazon.aws.ec2_vpc_subnet:
    region: "{{ ec2_region }}"
    vpc_id: "{{ create_vpc.vpc.id }}"
    cidr: "192.168.0.0/28"
    tags:
      Name: aws_revinent_subnet
      Demo: aws demo
  register: create_subnet

# Create Internet Gateway and attach it to VPC.  This allows instances on this VPC to reach the Internet
- name: create vpc internet gateway for aws-demo-vpc
  ec2_vpc_igw:
    vpc_id: "{{ create_vpc.vpc.id }}"
    region: "{{ ec2_region }}"
    tags:
      Name: aws_demo_igw
      Demo: aws demo
  register: igw

# This task adds a route to the internet from the subnet through the IGW
- name: This creates a default route (0.0.0.0/0) for the subnet to
  ec2_vpc_route_table:
    region: "{{ ec2_region }}"
    vpc_id: "{{ create_vpc.vpc.id }}"
    subnets:
      - "{{ create_subnet.subnet.id }}"
    routes:
      - dest: 0.0.0.0/0
        gateway_id: "{{ igw.gateway_id }}"
    tags:
      Name: aws_demo_default_route
      Demo: AWS demo

- name: save vars for ec2 task
  set_fact:
    ec2_vpc_subnet: "{{ create_subnet.subnet.id }}"
